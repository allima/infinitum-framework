#summary Describes the Session.

*Contents*
<wiki:toc max_depth="3" />

== Introduction ==

A `Session` represents the lifecycle of an Infinitum persistence service and acts as an interface to a configured application datastore. All database interaction should go through the `Session`, which also provides an API for creating [Criteria] and GenCriteria instances.

`Session` instances should be acquired from an InfinitumContext. When a `Session` is acquired, it must be opened before any transactions take place. Subsequently, it should also be closed to close the persistence service and clean up any resources.

In order to keep track of transient and persistent entities, `Session` implements a `Session` cache. This cache can be configured to recycle automatically in order to reclaim memory in InfinitumCfgXml. The cache can also be explicitly recycled by invoking `recycleCache()` on the `Session`. Additionally, the cache size can be modified by calling `setCacheSize(int)`.

== Acquiring a `Session` ==

The code below shows how a SQLite `Session` is acquired.

{{{
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
    Session session = InfinitumContextFactory.getInstance().configure(this, R.xml.infinitum).getSession(this, DataSource.Sqlite);
session.open(); // open for transactions
// database transactions
session.close(); // transactions may no longer be executed
}
}}}

== Runtime Configuration ==

A `Session`'s configuration is pulled from an application's `InfinitumContext`; however, its configuration may also be modified at runtime. For example, autocommit may be enabled or the cache size may be altered.

{{{
session.setAutocommit(true);
session.setCacheSize(500);
}}}

== Autocommit- and Transaction- based Sessions ==

An Infinitum `Session` can be configured to be in one of two modes: autocommit or transactional. In either case, `open()` must be invoked before database operations are made and `close()` invoked when a `Session` should be released. The difference between the two lies in how transactions are committed. With autocommit, transactions are committed implicitly as soon as they are executed. A transactional `Session` relies on transactions to handle commits explicitly, meaning a transaction must be opened within a `Session` and then explicitly committed. This method also allows for transactions to be rolled back. An example of both strategies is given below. Note that autocommit can be enabled or disabled in `infinitum.cfg.xml`, but is explicitly set in the examples to better illustrate what's going on.

=== Autocommit Example ===

{{{
session.setAutocommit(true);
session.open();
session.save(new Foo()); // Foo is persisted
session.close();
}}}

=== Transactional Example ===

{{{
session.setAutocommit(false);
session.open();
session.beginTransaction();
session.save(new Foo());
session.commit(); // Foo is persisted
session.close();
}}}

To rollback a transaction, `rollback()` is invoked:

{{{
session.setAutocommit(false);
session.open();
session.beginTransaction();
session.save(new Foo());
session.rollback(); // Foo is NOT persisted
session.close();
}}}

Transactions can be nested. When the outer transaction is ended all of the work done in that transaction and all of the nested transactions will be committed or rolled back.