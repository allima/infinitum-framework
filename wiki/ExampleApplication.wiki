#summary Walks through a simple example application using Infinitum
#labels Example

= Example Infinitum Application =

This brief tutorial walks through the process of creating a basic notepad application using the Infinitum Framework.

1. Create a new Android Project called '`NotepadExample`', select the Build Target 'Android 2.3.3' (API level 10).

2. Download the latest distribution of Infinitum Framework from the [http://code.google.com/p/infinitum-framework/downloads/list downloads page].

3. Add the Infinitum JAR and the Dexmaker dependency to the application's build path.

4. Create a new XML resource in `res/raw` called `infinitum.cfg.xml` with the following contents:

{{{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE infinitum-configuration PUBLIC
"-//Infinitum/Infinitum Configuration DTD 1.0//EN"
"http://clarionmedia.com/infinitum/dtd/infinitum-configuration-1.0.dtd">

<infinitum-configuration>
    
    <application>
        <property name="debug">true</property>
    </application>
    
    <domain>
    </domain>
    
    <beans>
        <component-scan base-package="com.clarionmedia" />
    </beans>
    
    <sqlite>
        <property name="dbName">notepad</property> 
        <property name="dbVersion">1</property>
    </sqlite>

</infinitum-configuration>
}}}

5. In order to provide framework support, we will extend one of Infinitum's Activities. In this case, make `NotepadExampleActivity` extend `InfinitumListActivity`.

{{{
public class NotepadExampleActivity extends InfinitumListActivity {
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

}
}}}

6. Modify the layout `main.xml` to include a `ListView`.

{{{
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent">
     
    <ListView  
        android:id="@android:id/list"
        android:layout_width="fill_parent" 
        android:layout_height="wrap_content" />
     
    <TextView
        android:id="@android:id/empty"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="No Notes" />
     
</LinearLayout>
}}}

7. In order to set the `Activity` layout, we will use the InjectLayout annotation.

{{{
@InjectLayout(R.layout.main)
public class NotepadExampleActivity extends InfinitumListActivity {
}}}

8. The notepad application will have a single domain object, `Note`.

{{{
public class Note {
	
	private long mId;
	private String mName;
	private String mContents;
	
	public long getId() {
		return mId;
	}
	
	public String getName() {
		return mName;
	}
	
	public void setName(String name) {
		mName = name;
	}
	
	public String getContents() {
		return mContents;
	}
	
	public void setContents(String contents) {
		mContents = contents;
	}

}
}}} 

9. The `Note` class needs to be added to the `domain` element in `infinitum.cfg.xml`.

{{{
<domain>
    <model resource="com.clarionmedia.notepadexample.domain.Note" />
</domain>
}}}

10. Create a new `Activity` that extends `InfinitumActivity` called `NoteTaker`.

{{{
public class NoteTaker extends InfinitumActivity {

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

}

}}}

11. Create a new layout for the `NoteTaker` `Activity` called `notetaker.xml`. The layout will include two `EditText`s for the note name and contents and two `Button`s for saving the note and discarding.

{{{
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="10dp">
    
    <EditText 
        android:id="@+id/noteName"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:hint="Name"
        android:layout_marginBottom="10dp" />
    
    <EditText 
        android:id="@+id/noteContents"
        android:layout_width="fill_parent"
        android:layout_height="250dp"
        android:layout_marginBottom="10dp" />
    
    <LinearLayout 
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:weightSum="1">
        
        <Button 
            android:id="saveNote"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="0.5"
            android:text="Save Note" />
        
        <Button 
            android:id="discardNote"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="0.5"
            android:text="Discard Note" />
        
    </LinearLayout>

</LinearLayout>
}}} 

12. Add the `EditText`s and `Button`s to the `NoteTaker` `Activity` and inject the respective `View`s and `Layout`.

{{{
@InjectLayout(R.layout.notetaker)
public class NoteTaker extends InfinitumActivity {
	
    @InjectView(R.id.noteName)
    private EditText mNoteName;
	
    @InjectView(R.id.noteContents)
    private EditText mNoteContents;
	
    @InjectView(R.id.saveNote)
    private Button mSaveNote;
	
    @InjectView(R.id.discardNote)
    private Button mDiscardNote;
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

}
}}}

13. First, we will bind the discard event. The event callback needs to be implemented and the [Bind] annotation added to the appropriate `Button`.

{{{
private void discardNote(View view) {
    setResult(RESULT_CANCELED);
    finish();
}
}}}

{{{
@InjectView(R.id.discardNote)
@Bind(callback = "discardNote")
private Button mDiscardNote;
}}}

14. Next, we will take care of saving notes. It's recommended that SQLite operations occur asynchronously, so we will use Android's `AsyncTask` to persist notes. In `NoteTaker`, create an inner class, `SaveNoteAsyncTask`, which extends `AsyncTask`.

{{{
private class SaveNoteAsyncTask extends AsyncTask<Note, Void, Long> {

    @Override
    protected Long doInBackground(Note... note) {
        Session session = getInfinitumContext().getSession(DataSource.Sqlite);
        session.open();
	long id = session.save(note[0]);
	session.close();
	return id;
    }
		
    @Override
    protected void onPostExecute(Long id) {
        if (id > 0) {
            setResult(RESULT_OK);
	    finish();
	}
    }
		
}
}}}
