#summary Describes the InfinitumContext object.
#labels Explained

*Contents*
<wiki:toc max_depth="3" />

== Introduction ==

Application-wide context information, which is read from the InfinitumCfgXml file, is stored in a container called `InfinitumContext`. Since the information stored in `InfinitumContext` is initialized from the configuration file, this object should not be instantiated directly. Rather, it should be obtained through the InfinitumContextFactory.


== Configuration ==

`InfinitumContext` is also configured in `InfinitumContextFactory` in addition to being obtained from it. Invoking the `configure` method in `InfinitumContextFactory` is critical and must be done before any attempts are made to access the context. The following code snippet illustrates this notion:

{{{
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
    InfinitumContext ctx = InfinitumContextFactory.getInstance().getInfinitumContext(); // throws InfinitumConfigurationException
}
}}}

The above example will throw a runtime exception because `configure` has not been called on the `InfinitumContextFactory`. The corrected code is as follows:

{{{
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
    InfinitumContextFactory.getInstance().configure(this, R.xml.infinitum);
    InfinitumContext ctx = InfinitumContextFactory.getInstance().getInfinitumContext();
}
}}}

`InfinitumContextFactory`'s `configure` method takes a `Context` and resource ID as arguments. The latter is the resource ID for `infinitum.cfg.xml`. Because `configure` returns an `InfinitumContext` instance, the above code can be made more concise:

{{{
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
    InfinitumContext ctx = InfinitumContextFactory.getInstance().configure(this, R.xml.infinitum);
}
}}}