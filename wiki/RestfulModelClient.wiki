#summary Describes the RestfulModelClient
#labels Explained

*Contents*
<wiki:toc max_depth="3" />

= Introduction =

The `RestfulModelClient` abstract class provides an API for communicating with a RESTful web service using domain objects. `RestfulModelClient` differs from RestfulClient in that it uses domain objects to communicate with a web service, while `RestfulClient` must be provided with RESTful endpoint URIs and request data. Thus, `RestfulModelClient` can be seen as a somewhat rudimentary ORM for application web services. RestfulModelClient is geared towards communicating with a repository web service, and RestfulClient is designed to simplify communication with any RESTful service in general, external API or otherwise. Because it is tied to an application's domain model, the `RestfulModelClient` must be configured in [http://code.google.com/p/infinitum-framework/wiki/InfinitumCfgXml#RESTful_Configuration InfinitumCfgXml].

Infinitum provides two implementations of `RestfulModelClient` called `RestfulJsonClient` and `RestfulXmlClient`, which can be extended or re-implemented for specific business needs. In order to remove implementation dependency from code, the `RestfulModelClient` implementation can be specified in infinitum.cfg.xml by referencing a bean which extends `RestfulModelClient`. This implementation is then acquired from the RestfulModelClientBuilder.

{{{
<rest ref="restClient">
...
</rest>

<beans>
    <bean id="restClient" src="com.example.rest.MyRestfulModelClient" />
</beans>
}}}

If no implementation is referenced in the configuration, `RestfulModelClientBuilder` will use Infinitum's `RestfulJsonClient`.

= Acquiring a `RestfulModelClient` =

Although a `RestfulModelClient` implementation can be instantiated directly, it's typically recommended that you use the `RestfulModelClientBuilder` (implemented by `RestfulModelClientFactory`), which handles dependency resolution and allows the `RestfulModelClient` to be configured before it is returned.

{{{
RestfulModelClient rest = new RestfulModelClientFactory().build();
}}}

Based on the example configuration in the section above which uses the `MyRestfulModelClient` implementation, the `RestfulModelClient` returned from the `RestfulModelClientFactory` can be safely casted to `MyRestfulModelClient`.

{{{
MyRestfulModelClient rest = (MyRestfulModelClient) new RestfulModelClientFactory().build();
}}}

If instantiating a `RestfulModelClient` directly, the `prepare()` method must be called before using it.

{{{
RestfulModelClient rest = new RestfulJsonClient();
rest.prepare();
}}}

= Configuring a `RestfulModelClient` =

`RestfulModelClientBuilder` provides methods for configuring a `RestfulModelClient` before it is retrieved using the `build()` method. JsonDeserializer, XmlDeserializer, and [http://code.google.com/p/infinitum-framework/wiki/TypeAdapter#RestfulTypeAdapter RestfulTypeAdapter] implementations can be registered with a `RestfulModelClient` through the `RestfulModelClientBuilder`. 

{{{
RestfulModelClient rest = new RestfulModelClientFactory().registerDeserializer(Foo.class, new JsonDeserializer<Foo>() {
    @Override
    public Bar deserializeObject(String json) {
        // deserialization logic
    }
    @Override
    public List<Foo> deserializeObjects(String json) {
        // deserialization logic
    }
}).registerTypeAdapter(DateTime.class, new RestfulTypeAdapter<DateTime>() {
    @Override
    public void mapToObject(ResultSet result, int index, Field field, Object model) throws IllegalArgumentException, IllegalAccessException {
        // mapping logic
    }
    @Override
    public void mapToField(DateTime value, String field, List<NameValuePair> pairs) {
        // mapping logic			
    }
    @Override
    public void mapObjectToField(Object value, String field, List<NameValuePair> pairs) {
        // mapping logic		
    }
}).build();
}}}

The methods `registerDeserializer` and `registerTypeAdapter` can also be invoked directly on the `RestfulModelClient` itself.

= Using a `RestfulModelClient` =

Once a `RestfulModelClient` has been configured and acquired, using it is quite trivial. `RestfulModelClient` provides basic CRUD web service operations.

== Persisting Domain Objects ==

{{{
// Save a single domain object
rest.save(new Foo());
}}}

== Updating Domain Objects ==

{{{
// Update a single domain object
Foo foo = getFoo();
rest.update(foo);

// Save or update a single domain object
Foo foo = getFoo();
rest.saveOrUpdate(foo);
}}}

== Deleting Domain Objects ==

{{{
// Delete a single domain object
Foo foo = getFoo();
rest.delete(foo);
}}}

== Loading Domain Objects ==

{{{
// Load a single domain object by its ID
Foo foo = rest.load(Foo.class, 42);
}}}