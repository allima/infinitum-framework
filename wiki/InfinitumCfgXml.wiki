#summary Describes the infinitum.cfg.xml configuration file.
#labels Explained

*Contents*
<wiki:toc max_depth="3" />

= Introduction =

Although Infinitum fosters the convention-over-configuration principle, it _does_ require a configuration file, called `infinitum.cfg.xml`, which contains properties that can otherwise not be assumed by the framework. That said, many of the configuration properties in this file are, in fact, optional and _can_ be resolved by the framework, but there are a few which must be provided.

= Application Configuration =

Infinitum has a number of optional application-wide properties which can be configured. They include: debug, object-relational mapping mode, and session cache recycling.

Enabling debug will prompt Infinitum to print log messages using Logcat. It's recommended that this be disabled for production environments. If this property is omitted, debug will be disabled by default.

The object-relational mapping mode indicates how the Infinitum ORM will be configured. Domain objects require some metadata for database mapping, which can come in the form of InfinitumAnnotations or XML MapFiles. By default, annotations are assumed.

The Infinitum ORM makes use of a session cache such that persistent entities are attached to a session, allowing for speedier retrieval and minimizing database queries. The cache size can be configured, but in sessions where many objects are retrieved, it can become full. The cache can be configured to recycle automatically when this occurs (note that it can also be manually recycled) by enabling the recycle cache property. It _will_ recycle automatically if not explicitly declared to do so, so this property need be included only if it is to be disabled.

== Application Configuration Example ==

{{{
<application>
    <property name="debug">true</property> <!-- [true | false] -->
    <property name="mode">annotations</property> <!-- [annotations | xml] -->
    <property name="recycleCache">false</property> <!-- [true | false] -->
</application>
}}}

= Domain Configuration =

In order to make use of Infinitum's ORM or RESTful client, an application's domain model classes must be declared within `infinitum.cfg.xml`. A model class is declared simply by identifying its package-qualified name.

== Domain Configuration Example ==

{{{
<domain>
    <model resource="com.clarionmedia.infinitumapp.domain.Foo" />
    <model resource="com.clarionmedia.infinitumapp.domain.Bar" />
    <model resource="com.clarionmedia.infinitumapp.domain.Baz" />
</domain>
}}}

= SQLite Configuration =

If SQLite is being used as a datastore, a database name and version number _must_ be provided. Optionally, a property indicating if the framework should create the database schema automatically and a property for indicating if autocommit is enabled can be provided as well. Both of these are enabled by default.

== SQLite Configuration Example ==

{{{
<sqlite>
    <property name="dbName">myDatabase</property> 
    <property name="dbVersion">2</property>
    <property name="generateSchema">true</property> <!-- [true | false] -->
    <property name="autocommit">false</property> <!-- [true | false] -->
</sqlite>
}}}

= RESTful Configuration =

If the RESTful web service client is being utilized, it _must_ be configured, at least minimally, in `infinitum.cfg.xml`. The only required property is the host, which designates the URL of the web service. Optional properties include connection timeout, response timeout, and authentication.

Connection and response timeouts indicate the time, in milliseconds, the client will wait for a connection or response, respectively, before failing.

If a web service uses some type of authentication, an authentication strategy can be registered. For example, if using a shared secret, a "token" strategy can be declared, indicating the name of the shared secret and the token itself (a token generator can also be used if an unchanging token is undesirable).

== RESTful Configuration Example ==

{{{
<rest>
    <property name="host">http://localhost:80/mywebservice</property>
    <property name="connectionTimeout">5000</property>
    <property name="responseTimeout">5000</property>
    <authentication strategy="token">
        <property name="tokenName">token</property>
        <property name="token">52b353fb27267973cebb5e8566e0415d</property>
    </authentication>
</rest>
}}}

= Putting It All Together =

All of the components discussed above are used to compose the `infinitum.cfg.xml` configuration file. An example of one such configuration file is seen below.

{{{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE infinitum-configuration PUBLIC
"-//Infinitum/Infinitum Configuration DTD 1.0//EN"
"http://clarionmedia.com/infinitum/dtd/infinitum-configuration-1.0.dtd">

<infinitum-configuration>

    <application>
        <property name="debug">true</property> <!-- [true | false] -->
        <property name="mode">annotations</property> <!-- [annotations | xml] -->
        <property name="recycleCache">false</property> <!-- [true | false] -->
    </application>

    <domain>
        <model resource="com.clarionmedia.infinitumapp.domain.Foo" />
        <model resource="com.clarionmedia.infinitumapp.domain.Bar" />
        <model resource="com.clarionmedia.infinitumapp.domain.Baz" />
    </domain>
    
    <sqlite>
        <property name="dbName">myDatabase</property> 
        <property name="dbVersion">2</property>
        <property name="generateSchema">true</property> <!-- [true | false] -->
        <property name="autocommit">false</property> <!-- [true | false] -->
    </sqlite>
    
    <rest>
        <property name="host">http://localhost:80/mywebservice</property>
        <property name="connectionTimeout">5000</property>
        <property name="responseTimeout">5000</property>
        <authentication strategy="token">
            <property name="tokenName">token</property>
            <property name="token">52b353fb27267973cebb5e8566e0415d</property>
        </authentication>
    </rest>

</infinitum-configuration>
}}}