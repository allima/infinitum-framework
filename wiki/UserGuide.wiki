#summary Infinitum user guide.
#labels Featured,Explained

*NOTE:* this wiki is a work in progress.

*Contents*
<wiki:toc max_depth="3" />

= Introduction =

Infinitum is a lightweight, extensible framework enabling Android developers to quickly and efficiently create rich, domain-driven applications while facilitating the convention-over-configuration paradigm. Infinitum's core components include an ORM and a RESTful web service client.

This user guide is designed to provide explanation for some of the various framework features and, perhaps more important, how to use them.

= Configuration =

  * InfinitumCfgXml: XML framework configuration file.
  * InfinitumContext: stores framework configuration data read from `infinitum.cfg.xml` and creates `Session`s.
  * ContextFactory: access point for retrieving `InfinitumContext` instances.

= ORM =

The Infinitum ORM provides an object-oriented approach to application data persistence while factoring out the underlying database representation. It allows for the persistence of POJOs (Plain Old Java Objects) and offers an API for constructing and executing SQL-less database queries. The ORM's overall goal is to allow developers to spend more time focusing on their problem domain and core business logic and less time on underlying data-access and boilerplate code by providing a transparent persistence layer.

== Persistence Layer ==

The ORM's user-facing API is actually relatively small. All data transactions are made through a single `Session` interface. The `Session` is the primary persistence service and is used to construct and subsequently execute queries.

  * [Session]: Infinitum persistence service.
  * [Criteria]: object-oriented database queries.
  * [Criterion]: `Criteria` query restrictions.
  * [Conditions]: provides static factory methods for creating `Criterion`.
  * TypeAdapter: facilitates the mapping of database column values to Java data types and vice versa.

== Domain Model Metadata ==

The Infinitum ORM can be provided with metadata for an application's domain model in order to configure some of its behavior. For example, a class can be marked transient or persistent, a model can be mapped to a specific table, or a field can be mapped to a specific column. Of course, following the principle of convention-over-configuration, this metadata is not required as Infinitum can infer it itself.

Metadata can come in two forms: XML map files and annotations. XML map files provide mapping information for domain classes while annotations provide the same information inline within the class.

=== Annotations ===

  * [Entity]: indicates the persistence state of a model.
  * [Table]:  indicates the name of a table an entity is mapped to.
  * [Persistence]: indicates the persistence state of a field.
  * [Column]: indicates the name of a column a field is mapped to.
  * PrimaryKey: indicates if a field is a primary key.
  * [Unique]: indicates that the field value must be unique to the table when being persisted to the database.
  * NotNull: indicates that the field may not contain a null value when being persisted to the database.
  * [Rest]: indicates the name of a resource field a field is mapped to for a RESTful web service.
  * ManyToMany: indicates that the annotated field represents a many-to-many relationship with another persistent class.
  * ManyToOne: indicates that the annotated field represents a many-to-one relationship with another persistent class.
  * OneToMany: indicates that the annotated field represents a one-to-many relationship with another persistent class.
  * OneToOne: indicates that the annotated field represents a one-to-one relationship with another persistent class.

=== Map Files ===

  * ImfXml: provides mapping information for a specific domain class.

= RESTful Client =

The Infinitum RESTful client provides an extensible API for communicating with a RESTful web service using objects.

  * RestfulClient: provides an interface for communicating with a RESTful web service.
  * RestfulClientBuilder: provides methods for configuring and constructing new `RestfulClient` instances.
  * AuthenticationStrategy: describes how web service requests should be authenticated.
  * SharedSecretAuthentication: used for token-based/shared-secret authentication.
  * TokenGenerator: generates shared-secret tokens.
  * JsonDeserializer: tells Infinitum how to deserialize specific JSON into domain model instances.
  * [http://code.google.com/p/infinitum-framework/wiki/TypeAdapter#RestfulTypeAdapter RestfulTypeAdapter]: facilitates the mapping of Java data types to RESTful web service resource fields.

= Logging =

In addition to its ORM and RESTful services, Infinitum offers an extremely lightweight logging framework which wraps Android's Logcat. This logging framework allows log statements to be made within application code but only asserted in debug environments. This means that logging code does not need any conditional statements or be removed altogether when preparing an application for release.

  * [Logger]: prints log messages to Logcat but adheres to environment configuration.