#summary Describes the RestfulModelClientBuilder
#labels Explained

*Contents*
<wiki:toc max_depth="3" />

= Introduction =

Under normal circumstances, it's not advisable to directly instantiate RestfulModelClient instances but rather use a factory class. Infinitum provides a `RestfulModelClient` factory interface as well as a backing implementation in order to minimize implementation dependencies in application code. This means that `RestfulModelClient` types can be specified in InfinitumCfgXml and injected into the factory class.

{{{
<rest ref="restClient">
...
</rest>

<beans>
    <bean id="restClient" src="com.example.rest.MyRestfulModelClient" />
</beans>
}}}

The factory interface is the `RestfulModelClientBuilder`. The implementation that the framework provides is called `RestfulModelClientFactory`, and it allows for `RestfulModelClient` instances to be configured and constructed.

= Acquiring a `RestfulModelClient` =

The `RestfulModelClientBuilder` interface specifies a `build()` method, which returns a `RestfulModelClient` instance.

{{{
RestfulModelClient rest = new RestfulModelClientFactory().build();
}}}

Based on the example configuration in the section above which uses the `MyRestfulModelClient` implementation, the `RestfulModelClient` returned from the `RestfulModelClientFactory` can be safely casted to `MyRestfulModelClient`.

{{{
MyRestfulModelClient rest = (MyRestfulModelClient) new RestfulModelClientFactory().build();
}}}

= Configuring a `RestfulModelClient` =

`RestfulModelClientBuilder` provides methods for configuring a `RestfulModelClient` before it is retrieved using the `build()` method. JsonDeserializer, XmlDeserializer, and [http://code.google.com/p/infinitum-framework/wiki/TypeAdapter#RestfulTypeAdapter RestfulTypeAdapter] implementations can be registered with a `RestfulModelClient` through the `RestfulModelClientBuilder`. 

{{{
RestfulModelClient rest = new RestfulModelClientFactory().registerDeserializer(Foo.class, new JsonDeserializer<Foo>() {
    @Override
    public Bar deserializeObject(String json) {
        // deserialization logic
    }
    @Override
    public List<Foo> deserializeObjects(String json) {
        // deserialization logic
    }
}).registerTypeAdapter(DateTime.class, new RestfulTypeAdapter<DateTime>() {
    @Override
    public void mapToObject(ResultSet result, int index, Field field, Object model) throws IllegalArgumentException, IllegalAccessException {
        // mapping logic
    }
    @Override
    public void mapToField(DateTime value, String field, List<NameValuePair> pairs) {
        // mapping logic			
    }
    @Override
    public void mapObjectToField(Object value, String field, List<NameValuePair> pairs) {
        // mapping logic		
    }
}).build();
}}}

Configurations can also be cleared from a `RestfulModelClientBuilder` using the `clearConfiguration()` method.

{{{
rest.clearConfiguration();
}}}